/*
 * Copyright (C) 2016-2020 David Rubio Escares / Kodehawa
 *
 *  Mantaro is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  Mantaro is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Mantaro.  If not, see http://www.gnu.org/licenses/
 */

import org.apache.tools.ant.filters.ReplaceTokens

//Plugins
plugins {
    //Compiles Java
    id 'java'
    //Adds an Executable Manifest
    id 'application'
    //Creates FatJars
    id 'com.github.johnrengelman.shadow' version '6.0.0'
}

archivesBaseName = 'MantaroAPI'
group 'kodehawa'
def ver = new Version(major: 2, minor: 2, revision: 0)
version ver.toString()
sourceCompatibility = 11
targetCompatibility = 11
mainClassName = "net.kodehawa.mantaroapi.MantaroAPI"

def lint = [
        "auxiliaryclass",
        "cast",
        "classfile",
        "deprecation",
        "dep-ann",
        "divzero",
        "empty",
        "exports",
        "fallthrough",
        "finally",
        "module",
        "opens",
        "options",
        "overloads",
        "overrides",
        "path",
        //removed because of "No processor claimed any of these annotations: ..."
        //"processing",
        "rawtypes",
        "removal",
        "requires-automatic",
        "requires-transitive-automatic",
        "serial",
        "static",
        "try",
        "unchecked",
        "varargs",
        "preview"
]

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
    options.encoding = 'UTF-8'
}

dependencies {
    implementation 'com.sparkjava:spark-core:2.9.3'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation ('com.github.adamint:patreon-java:417322b') { exclude group: 'org.slf4j' }
    implementation group: 'org.json', name: 'json', version: '20200518'
    implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.11'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    implementation group: 'redis.clients', name: 'jedis', version: '3.3.0'
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.14.9'
    testImplementation group: 'junit', name: 'junit', version: '4.13.1'
}

build.dependsOn shadowJar

artifacts {
    archives shadowJar
}

def gitRevision() {
    def gitVersion = new ByteArrayOutputStream()
    exec {
        commandLine("git", "rev-parse", "--short", "HEAD")
        standardOutput = gitVersion
    }

    return gitVersion.toString().trim()
}


task sourcesForRelease(type: Copy) {
    from ('src/main/java') {
        include '**/APIInfo.java'
        filter(ReplaceTokens, tokens: [
                version: ver.toString(),
                revision: gitRevision().toString()
        ])
    }
    into 'build/filteredSrc'

    includeEmptyDirs = false
}

task generateJavaSources(type: SourceTask) {
    def javaSources = sourceSets.main.allJava.filter {
        it.name != 'APIInfo.java'
    }
    source = javaSources + sourcesForRelease.destinationDir

    dependsOn sourcesForRelease
}

compileJava {
    source = generateJavaSources.source
    classpath = sourceSets.main.compileClasspath
    options.compilerArgs += ["-Xlint:${lint.join(",")}"]

    dependsOn generateJavaSources
}


task cleanDistTar(type: Delete) { delete files(distTar) }
distTar { archiveClassifier.set("trash") }
distTar.finalizedBy cleanDistTar

task cleanDistZip(type: Delete) { delete files(distZip) }
distZip { archiveClassifier.set("trash") }
distZip.finalizedBy cleanDistZip

task cleanUnshadedJar(type: Delete) { delete files(jar) }
jar { archiveClassifier.set("trash") }
jar.finalizedBy cleanUnshadedJar

shadowJar {
    archiveClassifier.set(null)
}

class Version {
    String major, minor, revision

    String toString() {
        "${major}.${minor}.${revision}"
    }
}
